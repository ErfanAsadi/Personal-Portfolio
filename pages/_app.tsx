/* eslint-disable @typescript-eslint/no-var-requires */
import "../styles/globals.css";
import CssBaseline from "@mui/material/CssBaseline";
import { CacheProvider } from "@emotion/react";
import { createEmotionCache } from "$lib/createEmotionCache";
import Head from "next/head";
import { appWithTranslation } from "next-i18next";
import { ThemeProvider } from "styles/ThemeProvider";
import { RecoilRoot } from "recoil";
import { useEffect, useState } from "react";
import { useDirection } from "$utils/hooks/useDirection";
import { motion, AnimatePresence } from "framer-motion";
import { MyAppProps } from "$utils/sharedTypes/IApp";
import styled from "@emotion/styled";
import { QueryClientProvider, Hydrate } from "react-query";
import { ReactQueryDevtools } from "react-query/devtools";
import { initializeReactQuery } from "$lib/initializeReactQuery";
import { MediaContextProvider } from "styles/theme/Media";

const clientSideEmotionCache = createEmotionCache();

const MyApp = (props: MyAppProps) => {
  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;
  const { deploymentConfigs, pageTransitionProps, dehydratedState } = pageProps;

  const dir = useDirection();

  const [queryClient] = useState(() => initializeReactQuery());

  useEffect(() => {
    document.documentElement.dir = dir;
  }, [dir]);

  return (
    <CacheProvider value={emotionCache}>
      <Head>
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <title>{deploymentConfigs.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <RecoilRoot>
        <ThemeProvider>
          {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
          <CssBaseline />
          <QueryClientProvider client={queryClient}>
            <Hydrate state={dehydratedState}>
              <AnimatePresence
                exitBeforeEnter
                initial={false}
                onExitComplete={() => window.scrollTo(0, 0)}
              >
                <PageTransition {...pageTransitionProps}>
                  <MediaContextProvider>
                    <Component {...pageProps} key={props.router.pathname} />
                  </MediaContextProvider>
                </PageTransition>
              </AnimatePresence>
            </Hydrate>
            <ReactQueryDevtools initialIsOpen={false} />
          </QueryClientProvider>
        </ThemeProvider>
      </RecoilRoot>
    </CacheProvider>
  );
};

const PageTransition = styled(motion.div)``;

export default appWithTranslation(MyApp);
